ABSTRAÇÃO --------------------------------------------------------------------------------------- 

- A abstração é um dos 4 pilares da POO.
- Significa: mostrar só o que importa e esconder os detalhes internos.
- Não é sobre “como eu escondo” (isso é encapsulamento), mas “o que eu escolho mostrar/esconder”.
- Exemplo na classe Produto.java:

public int getCodigo() { return codigo; }
public void setCodigo(int cod) { this.codigo = cod; }
Quem usa a classe só enxerga esses métodos, sem saber como o atributo codigo tá guardado lá dentro.

- Exemplo no mundo real:
- Um carro: você só usa volante, pedal, marcha → não vê a mecânica toda acontecendo.
- Uma TV: você só aperta “ligar/desligar” no controle → não sabe nem precisa saber da fiação interna.

ENCAPSULAMENTO -----------------------------------------------------------------------------------

- É a técnica de esconder os atributos (private) e controlar o acesso a eles.
- Isso normalmente é feito com getters e setters, que podem ter regras de validação.
- Exemplo na classe Calculadora.java:

public void setA(int a){
    if (a > 0){
        this.a = a;
    } else{
        System.out.println("Valor inválido para A! Deve ser > 0.");
        this.a = 0;
    }
}

- Aqui tu não só escondeu o atributo, mas também impediu que valores inválidos 
fossem jogados direto dentro da classe.
-Resumo prático:
- Abstração → visão simplificada, esconder complexidade.
- Encapsulamento → esconder os dados, criar uma “blindagem” com acesso controlado.

HERANÇA ---------------------------------------------------------------------------------------------

- Herança é um dos 4 pilares da POO.
- Permite que uma classe filha reutilize atributos e métodos de uma classe pai.
- A classe filha herda tudo que o pai tem (desde que não seja private) e pode:
- Usar os métodos/atributos do pai.
- Sobrescrever métodos do pai (@Override) para mudar o comportamento.
- Adicionar atributos ou métodos próprios.

class Produto { 
    private String nome;
    public void setNome(String n){ this.nome = n; }
    public String getNome(){ return nome; }
}

class Livro extends Produto { 
    private String autor;
    public void setAutor(String a){ this.autor = a; }
    public String getAutor(){ return autor; }
}

- Livro herda nome de Produto e ainda tem autor.
- Um objeto Livro pode usar getNome() e getAutor().
- Reuso de código = evita repetir atributos e métodos.
- Especialização = a classe filha pode acrescentar coisas novas ou mudar comportamento

